class Solution {
    public int shortestBridge(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;

        boolean[][] visited = new boolean[row][col];

        List<int[]> list1 = new ArrayList<>();
        List<int[]> list2 = new ArrayList<>();

        int flag = -1;
        int minDist = 1000000000;

        for(int i =0; i< row; i++){
            for(int j = 0; j< col ; j++){
                if(grid[i][j] == 1 && visited[i][j] == false){
                    helper(grid,visited, i,j, list1);
                    flag = 1;
                    break;
                }
            }
            if(flag == 1) break;
        }

        flag = -1;
        for(int i =0; i< row; i++){
            for(int j = 0; j< col ; j++){
                if(visited[i][j] == false && grid[i][j] == 1){
                    helper(grid,visited, i,j, list2);
                    flag = 1;
                    break;
                }
            }
            if(flag == 1) break;
        }

        for(int i=0; i< list1.size(); i++){
            for(int j =0; j< list2.size(); j++){
                minDist = Math.min(minDist, Math.abs(list1.get(i)[0] - list2.get(j)[0]) + Math.abs(list1.get(i)[1] - list2.get(j)[1]));
            }
        }

        return minDist - 1;
    }
    public void helper(int[][] grid, boolean[][] visited, int i, int j, List<int[]> list){
        int row = grid.length;
        int col = grid[0].length;

        int[][] directions = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};
        Queue<int[]> queue = new LinkedList<>();

        queue.add(new int[]{i, j});
        visited[i][j] = true;
        list.add(new int[]{i,j});

        while(!queue.isEmpty()){
            int size = queue.size();
            while(size-- > 0){
                int[] curr = queue.poll();
                int x = curr[0];
                int y = curr[1];

                for(int[] dir: directions){
                    int newX = x + dir[0];
                    int newY = y + dir[1];

                    if(newX < 0 || newX >= row || newY < 0 || newY >= col || visited[newX][newY] == true || grid[newX][newY] != 1) continue;

                    visited[newX][newY] = true;
                    list.add(new int[]{newX, newY});
                    queue.add(new int[]{newX, newY});
                }
            }
        }
    }
}
